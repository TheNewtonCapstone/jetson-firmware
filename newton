#!/usr/bin/env bash
ROOT="$(dirname "$(readlink -f "$0")")"


# Export environment variables for paths
export NEWTON_ROOT="${ROOT}"
export JETSON_CONTAINERS_PATH="${ROOT}/lib/jetson-containers"
export PYTHONPATH="${ROOT}/:${PYTHONPATH}"

function display_container_status() {
    echo "Active Newton containers:"
    docker ps --filter "ancestor=thenewtoncapstone/newton:l4t-r36.4.0" --format "table {{.ID}}\t{{.Status}}\t{{.Names}}"
}

# Function to stop containers
function stop_container() {
    local container_id=$1
    if [ -z "$container_id" ]; then
        echo "Stopping all Newton containers..."
        docker stop $(docker ps -q --filter "ancestor=thenewtoncapstone/newton:l4t-r36.4.0")
    else
        echo "Stopping container $container_id..."
        docker stop $container_id
    fi
}
function build_odrive_can() {
    echo "Building odrive_can package..."
    
    # Check if directory exists
    if [ ! -d "${ROOT}/lib/ros_odrive/" ]; then
        echo "Error: ros_odrive directory not found at ${ROOT}/lib/ros_odrive/"
        return 1
    fi
    # Store current directory to return to it later
    local current_dir=$(pwd)
    
    # Change to ros_odrive directory
    cd "${ROOT}/lib/ros_odrive/"

    # Source ROS environment if not already sourced
    if [ -z "$ROS_DISTRO" ]; then
        echo "Sourcing ROS environment..."
        source /opt/ros/humble/setup.bash
    fi

    # Run colcon build with error checking
    echo "Running colcon build..."
    if ! colcon build --packages-select odrive_can --symlink-install; then
        echo "Error: colcon build failed"
        cd "$current_dir"
        return 1
    fi
    ls -la 

    echo "Sourcing built package..."
    source install/setup.bash
    sleep .2

    cd "$current_dir"
    
    return 0
}

function build_imu_driver(){
    echo "Building imu_driver package..."
    src_dir="${ROOT}/modules/"
    module_dir="${src_dir}/imu"

    if [ ! -d $src_dir  ]; then
        echo "Error: directory not found at ${module_dir}"
        return 1
    fi

    local current_dir=$(pwd)

    cd $src_dir

    if [ -z "$ROS_DISTRO" ]; then
        echo "Sourcing ROS environment..."
        source /opt/ros/humble/setup.bash
    fi

    echo "Running colcon build..."
    # TODO : change tm_imu to imu_driver
    if ! colcon build --packages-select tm_imu --symlink-install; then
        echo "Error: colcon build failed"
        cd "$current_dir"
        return 1
    fi

    ls -la

    echo "Sourcing built package..."
    source install/setup.bash
    
    sleep .2

    cd "$current_dir"

    ros2 pkg list | grep tm_imu
    return 0

}
function build_motor_driver(){
    echo "Building motor_driver package..."
    src_dir="${ROOT}/modules/"
    module_dir="${src_dir}/motor"


    dependencies_dir="${ROOT}/lib/ros_odrive/install"
    # Check if directory exists
    if [ ! -d $src_dir  ]; then
        echo "Error: directory not found at ${module_dir}"
        return 1
    fi
    if [ ! -d dependencies_dir  ]; then
        build_odrive_can
    fi

    local current_dir=$(pwd)
    
    cd $src_dir
  
    # Source ROS environment if not already sourced
    if [ -z "$ROS_DISTRO" ]; then
        echo "Sourcing ROS environment..."
        source /opt/ros/humble/setup.bash
    fi


    # Run colcon build with error checking
    echo "Running colcon build..."
    if ! colcon build --packages-select motor_driver --symlink-install; then
        echo "Error: colcon build failed"
        cd "$current_dir"
        return 1
    fi
    ls -la 
    # Source the newly built package
    echo "Sourcing built package..."
    source install/setup.bash

    sleep .2

    # Return to original directory
    cd "$current_dir"
    
    ros2 pkg list | grep motor_driver
    return 0
}


function display_help_build() {
  echo "Usage: newton build <package>"
  echo "Build a package"
}

function display_help_run() {
    echo "Usage: newton run <container_name>"
    echo "Run a container"
    echo ""
    echo "Commands:"
    echo "  latest           Run the latest Newton container"
    echo "  status          Display status of running containers"
    echo "  stop [id]       Stop container(s). If no ID provided, stops all Newton containers"
}

function display_help_source() {
  echo "Usage: newton source <file to source>"
  echo "Source a container"
}
function run_latest(){
    docker run -it --net=host \
        -e DISPLAY=$DISPLAY \
        -v /dev:/dev \
        --device-cgroup-rule='c *:* rmw' \
        --device=/dev \
        -v /${work_dir}:/${work_dir}\
        thenewtoncapstone/newton:l4t-r36.4.0 \
    bin/bash
}

# python3.10 -m build_kit.cli "$@"

# sudo bash -c "curl https://cdn.odriverobotics.com/files/odrive-udev-rules.rules > /etc/udev/rules.d/91-odrive.rules && udevadm control --reload-rules && udevadm trigger"

# Check if any arguments were provided
if [ $# -eq 0 ]; then
    echo "No arguments provided"
    display_help_run
    exit 1
fi

if [ $1 == "run" ]; then
  # check for second argument
  if [ -z $2 ]; then
    display_help_run
  fi

  # TODO : check if the container to run exists
  # TODO : check if the container is already running

  if [ $2 == "latest" ]; then
    run_latest
  else
    docker run -it --net=host \
        -e DISPLAY=$DISPLAY \
        -v /dev:/dev \
        --device-cgroup-rule='c *:* rmw' \
        --device=/dev \
        -v /${ROOT}:/${ROOT}\
        thenewtoncapstone/newton:l4t-r36.4.0 \
    bin/bash
  fi
fi


if [ $1 == "source" ]; then
  # check for second argument
  if [ -z $2 ]; then
    display_help_source
  fi

  if [ $2 == "python" ]; then
    export PYTHONPATH="${ROOT}/:${PYTHONPATH}"
    # source ${ROOT}/lib/python-env/bin/activate
    elif [ $2 == "ros" ]; then
      source /opt/ros/humble/install/setup.bash
    elif [ $2 == "odrive_can" ]; then 
      source ${ROOT}/lib/ros_odrive/install/setup.bash
    elif [ $2 == "motor_driver" ]; then 
      source ${ROOT}/modules/install/setup.bash
  else
    display_help_source
  fi
fi


#########################################
# BUILD 
#########################################
if [ $1 == "build" ]; then
  # check for second argument
  if [ -z $2 ]; then
    display_help_build
  fi

  if [ $2 == "odrive_can" ]; then
    build_odrive_can
    ros2 pkg list | grep odrive_can
  fi

  if [ $2 == "motor_driver" ]; then
    build_motor_driver
    ros2 pkg list | grep motor_driver
  fi

  if [ $2 == "imu_driver" ]; then
    build_imu_driver
    ros2 pkg list | grep tm_imu
  fi
fi


#########################################
              # STOP
#########################################

if [ $1 == "stop" ]; then
    stop_container $2
fi
